




Lista punktów
2. Digram erd: 
    -brak 5 tabel(są 4)
	
	
	+++ trzeba zrobić diagram, bo nie ma
	
	
	
	
	
	
3.  Struktura i jakość bazy danych
    - Każda tabela musi mieć założony indeks na kolumnach często używanych w zapytaniach. 
   - Wykorzystanie ORM do zarządzania bazą 
  

	+++ relacje bazy danych
		reservations oraz user (1 do 1)
		reservations oraz screenings (1 do 1)
		movies oraz screenings (1 do wiele)
		movies oraz rooms (1 do 1)
	+++ niestety, ale w tak już zaawansowanym projekcie, nie mamy orm
	
  
  
   
   
6.  Dobór i uzasadnienie technologii
- Wykorzystanie dodatkowych nowoczesnych narzędzi (np. React Query, Prisma ORM). 

	+++ react 
Backend – Dobór i uzasadnienie technologii
W projekcie backendowym wykorzystano Express, popularny i lekki framework Node.js, który umożliwia szybkie tworzenie API. Do obsługi bazy danych użyto MySQL2, zapewniającego wydajne połączenie z relacyjną bazą danych. bcryptjs odpowiada za bezpieczne haszowanie haseł, a jsonwebtoken (JWT) za autoryzację użytkowników. CORS umożliwia komunikację między frontendem a backendem z różnych źródeł. express-session służy do zarządzania sesjami użytkowników. Dokumentacja API została zautomatyzowana przy pomocy Swaggera, co ułatwia testowanie i rozwój. Całość uzupełnia własny middleware do obsługi błędów.

Frontend – Dobór i uzasadnienie technologii
W części frontendowej wykorzystano bibliotekę React, która umożliwia tworzenie dynamicznych interfejsów użytkownika. Nawigację pomiędzy stronami realizuje React Router, pozwalając na obsługę różnych ścieżek aplikacji w sposób przyjazny użytkownikowi. Logika autoryzacji została wydzielona przy użyciu React Context (AuthContext), co zapewnia przejrzyste zarządzanie stanem logowania. Architektura została uzupełniona o komponentowy system routingu i wspólny pasek nawigacji (Navbar).



7. Architektura aplikacji 
-Przykład modularyzacji (podział na foldery / moduły).
	+++ cały backend jest pięknie podzielony na moduły, z których każdy ma swoją rolę
	+++ frontend identycznie





8. Design system i UX/UI 
- Strona musi wykorzystywać podejście Responsive Web Design i wyglądać dobrze na co najmniej 3 różnych wielkościach ekranów (TV/monitor -> tablet -> smartfon) 

	+++ strona korzysta z react boostrap, więc jest responsywna praktycznie na każdym ekranie





9. Uwierzytelnianie i autoryzacja
- Implementacja uwierzytelniania JWT + HttpOnly Cookies.
- Odświeżanie tokena przez mechanizm refresh tokens. 
- Obsługa wygaśnięcia sesji z poprawnym feedbackiem dla użytkownika. 

	+++ jsonwebtoken, dodano
	+++ dodano config/jwt.js, tam jest zarządzanie tokenem
	+++ dodano zarządzanie tokenem do /login, /logout oraz /refresh
	+++ /refresh odświerza token





10. REST API / GraphQL
- Endpointy zgodne z REST/GraphQL naming convention (/api/v1/resource). 
- Obsługa paginacji, filtrowania i sortowania w API. 
-  Statusy HTTP poprawnie przypisane do odpowiedzi. 
- Wykorzystanie odpowiednich kodów błędów i odpowiedzi JSON. 

	+++ każdy endpoint spełnia powyższe warunki




11. Wykorzystanie API przez frontend 
-Frontend poprawnie komunikuje się z API (fetch lub axios/interceptors). 
- Minimalizacja liczby żądań (np. agregacja danych, prefetching). 
- Obsługa ładowania, błędów i stanów pustych 

	+++ każda strona spełnia powyższe warunki




12. DRY Code 
-Wyodrębnienie logiki biznesowej poza kontrolery.
	+++ wszystkie zapytania mysql zostały wyodrębnione do swoich odpowiednich serwisów, w folderze backend/services.
	
	



15. Testy 
- pokrycie testami wszystkich endpointów (co najmniej 1 test per endpoint) i udokumentowanie tego, że faktycznie są pokryte 
- napisanie co najmniej 25 unit testów testujących realną funkcjonalność 





16(dokumentacja swagger zrobić to wiem)

	+++ to już jest









